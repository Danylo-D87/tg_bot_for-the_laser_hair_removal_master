import os
from datetime import datetime, timezone, timedelta

import telebot
from dotenv import load_dotenv

from llm.llm_answer import get_llm_answer
from llm.llm_detect_booking_intent import detect_booking_intent
from booking.calendar_api import list_free_slots, create_appointment
from .bot_utils import parse_date_range, format_slots, EMAIL_REGEX


load_dotenv()
bot = telebot.TeleBot(token=os.getenv("TOKEN"))

user_status = {}
user_temp_data = {}

MAX_MESSAGE_LENGTH = 4000

def send_long_message(chat_id, text):
    """
        Sends a potentially long text message to a specified chat by splitting it into
        multiple messages if it exceeds the Telegram message length limit.
    """
    for i in range(0, len(text), MAX_MESSAGE_LENGTH):
        bot.send_message(chat_id, text[i:i+MAX_MESSAGE_LENGTH])


@bot.message_handler(commands=["start"])
def start(message):
    """
        Handles the /start command.
        Resets the user's status to 'chat' and sends a welcome message.
    """
    user_status[message.from_user.id] = "chat"
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç—É–¥—ñ—ó LaserHouse, –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")


@bot.message_handler(func=lambda m: user_status.get(m.from_user.id, "chat") == "chat")
def handle_message(message):
    user_id = message.from_user.id

    if detect_booking_intent(message.text):
        user_status[user_id] = "slot_selection"
        bot.send_message(
            message.chat.id,
            "–°—É–ø–µ—Ä! –î–∞–≤–∞–π—Ç–µ –ø—ñ–¥–±–µ—Ä–µ–º–æ –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –¥–∞—Ç—É, –≤–∫–∞–∂—ñ—Ç—å –∑ —è–∫–æ—ó –¥–∞—Ç–∏ –¥–æ —è–∫–æ—ó –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–ª—å–Ω—ñ –º—ñ—Å—Ü—è.\n–£ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: –∑ 15.07 –ø–æ 20.07",
        )

    else:
        reply = get_llm_answer(message.text)
        bot.send_message(message.chat.id, reply)


@bot.message_handler(func=lambda m: user_status.get(m.from_user.id) == "slot_selection")
def handle_booking_slot_selection(message):
    """
        Handles general chat messages when the user's status is 'chat'.
        Detects booking intent or uses an LLM to generate a reply.
    """
    user_id = message.from_user.id

    date_range = parse_date_range(message.text)
    if not date_range:
        bot.send_message(
            message.chat.id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –∑ 15.07 –ø–æ 20.07",
        )
        return

    start_date, end_date = date_range
    kyiv_tz = timezone(timedelta(hours=3))
    start_date = start_date.replace(tzinfo=kyiv_tz)
    end_date = end_date.replace(tzinfo=kyiv_tz)
    slots = list_free_slots(
        start_iso=start_date.isoformat(),
        end_iso=end_date.isoformat()
    )

    if not slots:
        bot.send_message(
            message.chat.id,
            "–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω.",
        )
        return

    user_temp_data[user_id] = {"slots": slots}

    reply = format_slots(slots) + "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–∞—Ç–∏, –∫–æ—Ç—Ä–∞ –≤–∞—Å –≤–ª–∞—à—Ç–æ–≤—É—î"
    send_long_message(message.chat.id, reply)
    user_status[user_id] = "slot_confirmation"


@bot.message_handler(func=lambda m: user_status.get(m.from_user.id) == "slot_confirmation")
def handle_booking_slot_confirmation(message):
    user_id = message.from_user.id
    user_data = user_temp_data.get(user_id)

    if not user_data or "slots" not in user_data:
        bot.send_message(message.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–Ω–æ–≤—É.")
        user_status[user_id] = "slot_selection"
        return

    try:
        choice = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–∞—Ç–∏ –∑ –ø–µ—Ä–µ–ª—ñ–∫—É –¥–∞—Ç.")
        bot.send_message(message.chat.id, format_slots(user_data["slots"]))
        return

    slots = user_data["slots"]
    if choice < 1 or choice > len(slots):
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    selected_slot = slots[choice - 1]
    user_temp_data[user_id]["selected_slot"] = selected_slot
    user_status[user_id] = "booking_confirmation"
    bot.send_message(
        message.chat.id,
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É, —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è-–ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏.",
    )


@bot.message_handler(func=lambda m: user_status.get(m.from_user.id) == "booking_confirmation")
def handle_booking_email(message):
    user_id = message.from_user.id
    email = message.text.strip()

    if not EMAIL_REGEX.match(email):
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email.")
        return

    selected_slot = user_temp_data[user_id].get("selected_slot")
    if not selected_slot:
        bot.send_message(message.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
        user_status[user_id] = "slot_selection"
        return

    try:
        create_appointment(
            specialist="laserepilation",
            start_iso=selected_slot["start_iso"],
            end_iso=selected_slot["end_iso"],
            summary="–ó–∞–ø–∏—Å –Ω–∞ –ª–∞–∑–µ—Ä–Ω—É –µ–ø—ñ–ª—è—Ü—ñ—é",
            description=f"–ö–ª—ñ—î–Ω—Ç Telegram user_id: {user_id}",
            attendee_email=email
        )

    except Exception as e:
        bot.send_message(message.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        user_status[user_id] = "chat"
        user_temp_data.pop(user_id, None)
        return


    dt = datetime.fromisoformat(selected_slot["start_iso"])
    bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ –ß–µ–∫–∞—î–º–æ –≤–∞—Å {dt.strftime('%d.%m.%Y –æ %H:%M')}")
    user_status[user_id] = "chat"
    user_temp_data.pop(user_id, None)


def run_bot():
    print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î")
    bot.infinity_polling()
